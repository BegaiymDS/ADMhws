# -*- coding: utf-8 -*-
"""admhw1scriptsofsolutions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mS7L0m8SKx1x2TzhyJSMfW3Nw1P-VJZd

Say "Hello, World!" With Python
"""

print("Hello, World!")

"""Python If-Else"""

#!/bin/python3

import math
import os
import random
import re
import sys



n = int(input())
if n % 2:
    print("Weird")
elif 2 <= n <= 5:
    print("Not Weird")
elif 6 <= n <= 20:
    print("Weird")
else:
    print("Not Weird")

"""Arithmetic Operators"""

if __name__ == '__main__':
    a = int(input())
    b = int(input())

print(a + b)
print(a - b)
print(a * b)

"""Python: Division"""

if __name__ == '__main__':
    a = int(input())
    b = int(input())

    print(a // b)
print(a / b)

"""Loops"""

if __name__ == '__main__':
    n = int(input())

    for i in range(n):
        print(i*i)

"""Print Function"""

if __name__ == '__main__':
    n = int(input())
    print(*range(1, n+1), sep='')

"""Write a function"""

def is_leap(year):
    leap = False
    if year%400==0 :
        leap = True
    elif year%4 == 0 and year%100 != 0:
        leap = True

    return leap

"""Write a function"""

def is_leap(year):
    leap = False

    if year%400==0 :
        leap = True
    elif year%4 == 0 and year%100 != 0:
        leap = True


    return leap

"""Lists"""

if __name__ == '__main__':
    N = int(input())
    mylist = []
for i in range(0,N):
    text = input().split()
    if text[0] == "insert":
        mylist.insert(int(text[1]),int(text[2]))
    elif text[0] == "print":
        print(mylist)
    elif text[0] == "remove":
        mylist.remove(int(text[1]))
    elif text[0] == "append":
        mylist.append(int(text[1]))
    elif text[0] == "sort":
        mylist.sort()
    elif text[0] == "pop":
        mylist.pop()
    else:
        mylist.reverse()

"""Tuples"""

if __name__ == '__main__':
    n = int(input())
    integer_list = map(int, input().split())
    t = (tuple(integer_list))
    if len(t) == n:
        print (hash(t))

"""List Comprehensions"""

if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())

    coordinates = [[i, j, k]
    for i in range(x+1)
    for j in range(y+1)
    for k in range(z+1)
    if (i + j + k) != n]

print(coordinates)

"""Find the Runner-Up Score!"""

if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())
    print(sorted(list(set(arr)))[-2])

"""Nested Lists"""

if __name__ == '__main__':
    score_list = {}
    for _ in range(int(input())):
        name = input()
        score = float(input())
        if score in score_list:
            score_list[score].append(name)
        else:
            score_list[score] = [name]

    new_list = []
    for i in score_list:
        new_list.append([i, score_list[i]])

    new_list.sort()
    result = new_list[1][1]
    result.sort()
    print(*result, sep="\n")

"""Finding the percentage

"""

if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()
    output = list(student_marks[query_name])
per = sum(output)/len(output);
print("%.2f" % per);

"""Tuples"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
    n = int(input())
    integer_list = map(int, input().split())
    T=tuple(integer_list)
    print(hash(T))

"""sWAP cASE"""

def swap_case(s):

    string = ""

    for i in s:

        if i.isupper() == True:
            string+=(i.lower())
        else:
            string+=(i.upper())

    return string

if __name__ == '__main__':

"""String Split and Join"""

def split_and_join(line):
    # write your code here
    a = line.split(" ")
    b = "-".join(a)
    return(b)

if __name__ == '__main__':

"""What's Your Name?"""

#
# Complete the 'print_full_name' function below.
#
# The function is expected to return a STRING.
# The function accepts following parameters:
#  1. STRING first
#  2. STRING last
#

def print_full_name(first, last):
    # Write your code here
    print("Hello " + first + " " + last + "! You just delved into python.")

if __name__ == '__main__':

"""Mutations"""

def mutate_string(string, position, character):
    n = list(string)
    n[position] = character
    string = "".join(n)
    return string


if __name__ == '__main__':

"""Find a string"""

def count_substring(string, sub_string):
    count = 0
    sub_len = len(sub_string)
    for i in range(len(string) - sub_len + 1):
        if string[i:i+sub_len] == sub_string:
            count += 1
    return count
    return

if __name__ == '__main__':

"""String Validators"""

if __name__ == '__main__':
    s = input()

print(any([i.isalnum() for i in s]))
print(any([i.isalpha() for i in s]))
print(any([i.isdigit() for i in s]))
print(any([i.islower() for i in s]))
print(any([i.isupper() for i in s]))

"""Text Alignment"""

#Replace all ______ with rjust, ljust or center.

thickness = int(input()) #This must be an odd number
c = 'H'
#Top Cone
for i in range(thickness):
    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))
#Top Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))
#Middle Belt
for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))
#Bottom Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))
#Bottom Cone
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))

"""Text Wrap"""

import textwrap

def wrap(string, max_width):
    return textwrap.fill(string, max_width)


if __name__ == '__main__':

"""Designer Door Mat"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
n,m=(input().split())
n=int(n)
m=int(m)
for i in range(1,n,2):
    print("-" * 3*((n-i)//2) + ".|."*i + "-" * 3*((n-i)// 2))
print((((m-7)//2)*"-"+ "WELCOME"+((m-7)//2)*"-") )

for i in range(n-2,-1,-2):
    print("-" * 3*((n-i)//2) + ".|."*i + "-" * 3*((n-i)// 2))

"""String Formatting"""

def print_formatted(number):
    # your code goes here
    width = len("{0:b}".format(number))
    for i in range(1, n + 1):
        print("{0:{width}d} {0:{width}o} {0:{width}X} {0:{width}b}".format(i, width=width))

if __name__ == '__main__':

"""Capitalize!"""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(s):
    for x in s[:].split():
        s = s.replace(x, x.capitalize())
    return s

if __name__ == '__main__':

"""Introduction to Sets"""

def average(array):
    # your code goes here
    x=set(array)
    y=sum(x)
    return y/len(x)

if __name__ == '__main__':

"""Symmetric Difference"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
n1 = int(input())
set_a = set(map(int,input().split()))
n2 = int(input())
set_b = set(map(int,input().split()))
a = (set_a.difference(set_b))
b = (set_b.difference(set_a))
ans = a.union(b)
for i in sorted(ans):
        print (i)

"""Set .add()"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
n = int(input())
countryname_set = set()

for _ in range(n):
    countryname_set.add(input())

print(len(countryname_set))

"""Set .discard(), .remove() & .pop()"""

n = int(input())
s = set(map(int, input().split()))

for _ in range(int(input())):
    s1 = input().split()
    command = s1[0]
    if command == 'pop':
        s.pop()
    elif command == 'remove':
        s.remove(int(s1[1]))
    elif command == 'discard':
        s.discard(int(s1[1]))

print(sum(s))

"""Set .intersection() Operation"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
a=input()
english=set(input().split())
b= input()
french= set(input().split())

print(len(english.intersection(french)))

"""Set .union() Operation"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
n = int(input())
a = list(input().split())
m = int(input())
b = list(input().split())

s1 = set(a)
s2 = set(b)

print(len(s1.union(s2)))

"""Set .difference() Operation"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
a=input()
english=set(input().split())
b= input()
french= set(input().split())

print(len(english.difference(french)))

"""Set .symmetric_difference() Operation"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
a=input()
english=set(input().split())
b= input()
french= set(input().split())

print(len(english.union(french)-english.intersection(french)))

"""Set Mutations"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
input()
numbers = set([int(x) for x in input().split()])
Leng = int(input())
for _ in range(Leng):
    c, m = input().split()
    b = set([int(x) for x in input().split()])
    if c[0] == "i":
        numbers =numbers&b
    elif c[0] == "u":
        numbers = numbers|b
    elif c[0] == "d":
        numbers = numbers -b
    else:
        numbers =numbers^b
print(sum(numbers))

"""The Captain's Room"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
from collections import Counter

k = int(input())
elements = list(map(int,input().split()))
elementset=set(elements)

a=Counter(elements)
print(min(a,key=a.get))

"""collections.Counter()"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
from collections import Counter
x=(input().split())
x=int(x[0])
shoesizes=list(map(int ,input().split()))
sayi = Counter(shoesizes)
para = 0
customers=(input().split())
customers=int(customers[0])
for customerNumber in range(customers):
    shoesize=list(map(int ,input().split()));
    if (sayi.get(shoesize[0], None) !=None) :
        shoesizes.remove(shoesize[0]);
        para=para+shoesize[1];
        sayi = Counter(shoesizes);

print(para)

"""DefaultDict Tutorial"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
from collections import defaultdict

dd = defaultdict(list)
n, m = [int(i) for i in input().split()]

for i in range(1,n+1):
    dd[input()].append(str(i))

for i in range(m):
    inp = input()
    if dd[inp]:
        s = " ".join(dd[inp])
        print(s)
    else:
        print(-1)

Collections.namedtuple()

# Enter your code here. Read input from STDIN. Print output to STDOUT
from collections import namedtuple
x = 0
n = int(input())
namesofcol = input().split()

for _ in range(n):
    allof = input().split()
    student_data = dict(zip(namesofcol, allof))
    x += float(student_data['MARKS'])

average_mark = x / n
print(round(average_mark, 3))

"""Collections.OrderedDict()"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
from collections import defaultdict
ordered_dict = defaultdict(int)
N = int(input())

for i in range(N):
    name_and_price = input().split()
    item = " ".join(name_and_price[:-1])
    quantity = int(name_and_price[-1])
    ordered_dict[item] += quantity

for item, quantity in ordered_dict.items():
    print(item, quantity)

"""Word Order"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
from collections import Counter

n = int(input())
words = []

for i in range(n):
    word = input()
    words.append(word)

word_counts = Counter(words)

print(len(word_counts))
for word, count in word_counts.items():
    print(f"{count} ", end="")

"""Collections.deque()"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
from collections import deque

n = int(input())
deq = deque()

for _ in range(n):
    command, *args = input().split()

    if command == "popleft":
        deq.popleft()
    elif command == "appendleft":
        deq.appendleft(int(args[0]))
    elif command == "pop":
        deq.pop()
    elif command == "append":
        deq.append(int(args[0]))

print(" ".join(map(str, deq)))

"""Calendar Module"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
import calendar

day, month, year = (input().split())

weekday = ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]
print(weekday[(calendar.weekday(int(year),int(month),int(day)))])

"""Exceptions"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
NTest_Cases = int(input())
for i in range(NTest_Cases):
    a, b = input().split()
    try:
        result = int(a) // int(b)
        print(result)
    except ZeroDivisionError as error:
        print("Error: Division by zero")
    except ValueError as error:
        print(f"Error: {error} - Input must be integers")

"""Athlete Sort"""

#!/bin/python3

import math
import os
import random
import re
import sys



if __name__ == '__main__':
    nm = input().split()

    n = int(nm[0])

    m = int(nm[1])

    arr = []

    for _ in range(n):
        arr.append(list(map(int, input().rstrip().split())))

    k = int(input())

"""Zipped!"""

N, X = map(int, input().split())

lists = [list(map(float, input().split())) for _ in range(X)]

averages = [sum(values) / len(values) for values in zip(*lists)]

for average in averages:
    print(average)

"""ginortS"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
def custom_sort(c):
    if c.islower():
        return (0, c)
    elif c.isupper():
        return (2, c)
    elif c.isdigit() and int(c) % 2 == 0:
        return (1, c)
    elif c.isdigit() and int(c) % 2 != 0:
        return (3, c)
    else:
        return (4, c)
input_string = input()
sorted_string = ''.join(sorted(input_string, key=custom_sort))

print(sorted_string)

"""Map and Lambda Function"""

cube = lambda x:


def cube(x):
    return x ** 3

def generate_fibonacci(n):
    fib_sequence = []
    a, b = 0, 1
    for _ in range(n):
        fib_sequence.append(a)
        a, b = b, a + b
    return fib_sequence

if __name__ == '__main__':

"""Birthday Cake Candles"""

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'birthdayCakeCandles' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER_ARRAY candles as parameter.
#

def birthdayCakeCandles(candles):
    # Write your code here

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    candles_count = int(input().strip())

    candles = list(map(int, input().rstrip().split()))

    result = birthdayCakeCandles(candles)

    fptr.write(str(result) + '\n')

    fptr.close()

"""Number Line Jumps"""

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'kangaroo' function below.
#
# The function is expected to return a STRING.
# The function accepts following parameters:
#  1. INTEGER x1
#  2. INTEGER v1
#  3. INTEGER x2
#  4. INTEGER v2
#

def kangaroo(x1, v1, x2, v2):
    # Write your code here

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    x1 = int(first_multiple_input[0])

    v1 = int(first_multiple_input[1])

    x2 = int(first_multiple_input[2])

    v2 = int(first_multiple_input[3])

    result = kangaroo(x1, v1, x2, v2)

    fptr.write(result + '\n')

    fptr.close()

"""Viral Advertising"""

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'viralAdvertising' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER n as parameter.
#

def viralAdvertising(n):
    # Write your code here

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    result = viralAdvertising(n)

    fptr.write(str(result) + '\n')

    fptr.close()

"""Insertion Sort - Part 1"""

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'insertionSort1' function below.
#
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER_ARRAY arr
#

def insertionSort1(n, arr):
    # Write your code here

if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    insertionSort1(n, arr)